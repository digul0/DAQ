cmake_minimum_required(VERSION 3.12)
project(DAQ)
file(GLOB HEADERS RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}" "*.h") 
file(GLOB SOURCES RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}" "*.cpp") 
add_executable(${PROJECT_NAME} ${SOURCES} ${HEADERS})
target_compile_features(DAQ PUBLIC cxx_std_17)
#include_directories(.)
#set (Boost_DEBUG 1)
set(Boost_USE_STATIC_LIBS        ON) # only find static libs
set(Boost_USE_MULTITHREADED      ON)
set(Boost_USE_STATIC_RUNTIME    OFF)
#my boost compiled by older version mingw 
#comment the next string using "#" if boost was buid using current compiler.
#set(Boost_COMPILER "-mgw73")
if(${CMAKE_SIZEOF_VOID_P} EQUAL 8)
  set(CMAKE_CXX_COMPILER_ARCHITECTURE_ID "x64")
elseif(${CMAKE_SIZEOF_VOID_P} EQUAL 4)
  set(CMAKE_CXX_COMPILER_ARCHITECTURE_ID "x86")
endif()
#if notfound use std::regex
find_package(Boost COMPONENTS regex) #REQUIRED
if (${Boost_FOUND})
  add_compile_definitions("HAS_BOOST")
  if (${CMAKE_CXX_COMPILER_ID} EQUAL MSVC)
    add_compile_definitions("_SILENCE_ALL_CXX17_DEPRECATION_WARNINGS")
  endif()
  target_include_directories(${PROJECT_NAME} PUBLIC ${Boost_INCLUDE_DIRS})
  target_link_libraries(${PROJECT_NAME} ${Boost_LIBRARIES})
else()
  message (AUTHOR_WARNING  "boost::regex fot found! std::regex will be used instead of boost::regex")
endif()
 #DAQ is not crossplatform, WIN32 only. Yet.
if(NOT ${WIN32})
  message (WARNING  "DAQ is not crossplatform, WIN32 only. Yet.")
endif()