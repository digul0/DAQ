cmake_minimum_required(VERSION 3.11)
project(DAQ)
file(GLOB HEADERS RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}" "*.h") 
file(GLOB SOURCES RELATIVE "${CMAKE_CURRENT_SOURCE_DIR}" "*.cpp") 
add_executable(${PROJECT_NAME} ${SOURCES} ${HEADERS})
target_compile_features(DAQ PUBLIC cxx_std_17)

set(Boost_USE_STATIC_LIBS        ON) # find only static libs
set(Boost_USE_MULTITHREADED      ON)
set(Boost_USE_STATIC_RUNTIME    OFF)

#my boost compiled by older version mingw 
#uncomment below line string using "#" if boost was buid using current compiler.
#set(Boost_COMPILER "-mgw73")
if(${CMAKE_SIZEOF_VOID_P} EQUAL 8)
  set(CMAKE_CXX_COMPILER_ARCHITECTURE_ID "x64")
elseif(${CMAKE_SIZEOF_VOID_P} EQUAL 4)
  set(CMAKE_CXX_COMPILER_ARCHITECTURE_ID "x86")
endif()

find_package(Boost COMPONENTS regex)
if (${Boost_FOUND})
  add_definitions(-DHAS_BOOST)
  target_link_libraries(${PROJECT_NAME} ${Boost_LIBRARIES})
  target_include_directories(${PROJECT_NAME} PUBLIC ${Boost_INCLUDE_DIRS})
else()
  message (AUTHOR_WARNING  "boost::regex fot found! std::regex will be used instead of boost::regex")
endif()

  if (${CMAKE_CXX_COMPILER_ID} EQUAL MSVC)
    add_definitions(-D_SILENCE_ALL_CXX17_DEPRECATION_WARNINGS)
    set(CompilerFlags
        CMAKE_CXX_FLAGS
        CMAKE_CXX_FLAGS_DEBUG
        CMAKE_CXX_FLAGS_RELEASE
        CMAKE_CXX_FLAGS_MINSIZEREL
        CMAKE_CXX_FLAGS_RELWITHDEBINFO
        CMAKE_C_FLAGS
        CMAKE_C_FLAGS_DEBUG
        CMAKE_C_FLAGS_RELEASE
        CMAKE_C_FLAGS_MINSIZEREL
        CMAKE_C_FLAGS_RELWITHDEBINFO)
		
        foreach(CompilerFlag ${CompilerFlags})
          string(REPLACE "/MD" "/MT" ${CompilerFlag} "${${CompilerFlag}}")
        endforeach()
  else()
	    add_compile_options( -static -lstatic-libgcc -lstatic-libstdc++ )
		target_link_libraries(${PROJECT_NAME} -static -s)
  endif()

if(NOT ${WIN32})
  message (WARNING  "DAQ is not crossplatform, WIN32 only. Yet.")
endif()


install(TARGETS DAQ RUNTIME DESTINATION "${CMAKE_CURRENT_SOURCE_DIR}/bin_final")
install(FILES "Job.ini" "Portmap.ini" DESTINATION "${CMAKE_CURRENT_SOURCE_DIR}/bin_final")
install(DIRECTORY DESTINATION ${CMAKE_CURRENT_SOURCE_DIR}/bin_final/Results)
install(DIRECTORY DESTINATION ${CMAKE_CURRENT_SOURCE_DIR}/bin_final/Answers)
